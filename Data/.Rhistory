g
# Second Attempt
v <- function(sim) {
y<-rbinom(1,6,0.8)
#print(y)
simulation <- c()
for (i in 1:sim) {
ordinary <- rnorm(10-y,50,10)
outstanding <- rnorm(y,70,10)
if (y>2) {
u<-sum(sort(outstanding)[3]>ordinary)
if (u==(10-y)) {
simulation[i] <- 1
}
else {
simulation[i] <- 0
}
}
else {
simulation[i] <- 0
}
}
return(sum(simulation)/sim)
}
g <- c()
for (r in 1:100) {
g[r] <- v(10000)
}
# Second Attempt
v <- function(sim) {
#print(y)
simulation <- c()
for (i in 1:sim) {
y<-rbinom(1,6,0.8)
ordinary <- rnorm(10-y,50,10)
outstanding <- rnorm(y,70,10)
if (y>2) {
u<-sum(sort(outstanding)[3]>ordinary)
if (u==(10-y)) {
simulation[i] <- 1
}
else {
simulation[i] <- 0
}
}
else {
simulation[i] <- 0
}
}
return(sum(simulation)/sim)
}
g <- c()
# Second Attempt
v <- function(sim) {
#print(y)
simulation <- c()
for (i in 1:sim) {
y<-rbinom(1,6,0.8)
ordinary <- rnorm(10-y,50,10)
outstanding <- rnorm(y,70,10)
if (y>2) {
u<-sum(sort(outstanding)[3]>ordinary)
if (u==(10-y)) {
simulation[i] <- 1
}
else {
simulation[i] <- 0
}
}
else {
simulation[i] <- 0
}
}
return(sum(simulation)/sim)
}
g <- c()
for (r in 1:100) {
g[r] <- v(10000)
}
mean(g)
g
for (i in 1:10) {
y <- rbinom(1,6,0.8)
ordinary <- rnorm(10-y,50,10)
outstanding <- rnorm(y,70,10)
if (length(outstanding)>2) {
u<-sum(sort(outstanding)[3]>ordinary)
if (u==5) {
simulation[i] <- 1
}
else {
simulation[i] <- 0
}
}
else {
simulation[i] <- 0
}
}
#print(y)
simulation <- c()
for (i in 1:10) {
y <- rbinom(1,6,0.8)
ordinary <- rnorm(10-y,50,10)
outstanding <- rnorm(y,70,10)
if (length(outstanding)>2) {
u<-sum(sort(outstanding)[3]>ordinary)
if (u==5) {
simulation[i] <- 1
}
else {
simulation[i] <- 0
}
}
else {
simulation[i] <- 0
}
}
sum(simulation)
for (i in 1:100000) {
y <- rbinom(1,6,0.8)
ordinary <- rnorm(10-y,50,10)
outstanding <- rnorm(y,70,10)
if (length(outstanding)>2) {
u<-sum(sort(outstanding)[3]>ordinary)
if (u==5) {
simulation[i] <- 1
}
else {
simulation[i] <- 0
}
}
else {
simulation[i] <- 0
}
}
sum(simulation)
for (i in 1:100000) {
y <- rbinom(1,6,0.8)
ordinary <- rnorm(10-y,50,10)
outstanding <- rnorm(y,70,10)
if (length(outstanding)>2) {
u<-sum(sort(outstanding)[3]>ordinary)
if (u==(10-y)) {
simulation[i] <- 1
}
else {
simulation[i] <- 0
}
}
else {
simulation[i] <- 0
}
}
sum(simulation)
y <- rbinom(1,6,0.8)
y <- rbinom(1,6,0.8)
y <- rbinom(1,6,0.8)
for (i in 1:100000) {
y <- rbinom(1,6,0.8)
ordinary <- rnorm(10-y,50,10)
outstanding <- rnorm(y,70,10)
if (length(outstanding)>2) {
u<-sum(sort(outstanding)[3]>ordinary)
if (u==(10-y)) {
simulation[i] <- 1
}
else {
simulation[i] <- 0
}
}
else {
simulation[i] <- 0
}
}
sum(simulation)
sort(outstanding)
?sort
for (i in 1:100000) {
y <- rbinom(1,6,0.8)
ordinary <- rnorm(10-y,50,10)
outstanding <- rnorm(y,70,10)
if (length(outstanding)>2) {
u<-sum(sort(outstanding, decreasing=FALSE)[3]>ordinary)
if (u==(10-y)) {
simulation[i] <- 1
}
else {
simulation[i] <- 0
}
}
else {
simulation[i] <- 0
}
}
sum(simulation)
for (i in 1:100000) {
y <- rbinom(1,6,0.8)
ordinary <- rnorm(10-y,50,10)
outstanding <- rnorm(y,70,10)
if (length(outstanding)>2) {
u<-sum(sort(outstanding, decreasing=TRUE)[3]>ordinary)
if (u==(10-y)) {
simulation[i] <- 1
}
else {
simulation[i] <- 0
}
}
else {
simulation[i] <- 0
}
}
sum(simulation)
for (i in 1:100000) {
y <- rbinom(1,6,0.8)
ordinary <- rnorm(10-y,50,10)
outstanding <- rnorm(y,70,10)
if (length(outstanding)>2) {
u<-sum(sort(outstanding, decreasing=TRUE)[3]>ordinary)
if (u==(10-y)) {
simulation[i] <- 1
}
else {
simulation[i] <- 0
}
}
else {
simulation[i] <- 0
}
}
sum(simulation)
sum(simulation)/simulation
sum(simulation)/1000000
for (i in 1:100000) {
y <- rbinom(1,6,0.8)
ordinary <- rnorm(10-y,50,10)
outstanding <- rnorm(y,70,10)
if (length(outstanding)>2) {
u<-sum(sort(outstanding, decreasing=TRUE)[3]>ordinary)
if (u==(10-y)) {
simulation[i] <- 1
}
else {
simulation[i] <- 0
}
}
else {
simulation[i] <- 0
}
}
sum(simulation)/100000
#EXERCISE 1
n<-100000
m<-runif(n)
mean(1/(m+1))
# Question 1a)
xi <- runif(1e5)
# Question 1b)
hist(xi)
X1=m[-n]
X2=m[-1]
plot(X1, X2, pch=20, cex=0.1, col="royalblue1") #Scatter Plot title(main = "Scatter Plot")
acf(xi)
# Question 1c)
summary(xi)
var(xi)
# Question 1d)
length(xi[xi>0.6])/length(xi)
#EXERCISE 1
n<-1000000
# Question 1a)
xi <- runif(1e5)
# Question 1d)
length(xi[xi>0.6])/length(xi)
X1=m[-n]
X2=m[-1]
plot(X1, X2, pch=20, cex=0.1, col="royalblue1") #Scatter Plot title(main = "Scatter Plot")
acf(xi)
# Question 1c)
summary(xi)
var(xi)
# Question 1d)
length(xi[xi>0.6])/length(xi)
# Question 2
# 10^4 simulations
y<-runif(1e4)
z<-(1/y)*exp(-log(y)^2/2)
area<-mean(z)
sqrt(mean(z^2)-area^2)/n
# Question 3a)
z<-exp(-(xi^1.5))
area<-mean(z)
sqrt(mean(z^2)-area^2)/n
# Question 2
# 10^4 simulations
y<-runif(1e4)
z<-(1/y)*exp(-log(y)^2/2)
area<-mean(z)
sqrt(mean(z^2)-area^2)/n
# Question 3a)
z<-exp(-(xi^1.5))
area<-mean(z)
sqrt(mean(z^2)-area^2)/n
# Question 3b)
# transformation used y=exp(-x)
y<-runif(1e5)
z<-(1/y)*exp(-(-log(y))^1.5)
area<-mean(z)
sqrt(mean(z^2)-area^2)/n
b <- function(x) {exp(-x^1.5)}
integrate(b, 0,Inf)
# Question 3c)
# transformation used y=exp(-x)
y<-runif(1e5)
z<-1/y * 1/(1+log(y)^2)
area<-mean(z)
area*2
# transformation used y=exp(-x^2)/2
y<-runif(1e5)
z<-1/(y*sqrt(-2*log(y))) * 1/(1+(2*log(y))^2)
area<-mean(z)
area*2
# transformation used y=exp(-x^2)/2
y<-runif(1e5)
z<-1/(y*sqrt(-2*log(y))) * 1/(1+(2*log(y))^2)
area<-mean(z)
area*2
sqrt(mean(z^2)-area^2)/n
# transformation used y=1/(1+x)
y<-runif(1e5)
z<-(1/y^2)*1/(1+(1/y-1)^2)
area<-mean(z)
area*2
sqrt(mean(z^2)-area^2)/n
# transformation used y=exp(-x^2)/2
y<-runif(1e5)
z<-1/(y*sqrt(-2*log(y))) * 1/(1+(2*log(y))^2)
area<-mean(z)
area*2
sqrt(mean(z^2)-area^2)/n
# Question 3d)
x<-runif(1e5)
y<-runif(1e5)
z<-runif(1e5)
w<-runif(1e5)
z1<-exp(-sqrt(x*y*z*w))
area<-mean(z1)
sqrt(mean(z1^2)-area^2)/n
# Question 3
z<-rnorm(1e3,20.5)
hist(z)
plot(1:1000,z)
qqnorm(z)
# Question 3
z<-rnorm(1e3,20,5)
hist(z)
plot(1:1000,z)
qqnorm(z)
#Question 4a
rnorm(1e3,)
#Question 4a
rnorm(1e3,10,20)
#Question 4a
z<-rnorm(1e3,10,20)
sd(z)
se<-sd(z)
se<-20
LCI = Estimated_Int-1.96*se #Lower Bound of CI
ULI = Estimated_Int+1.96*se #Upper Bound of CI
Estimated_Int<-10
LCI = Estimated_Int-1.96*se #Lower Bound of CI
ULI = Estimated_Int+1.96*se #Upper Bound of CI
# Question 2
x<-runif(1e7)
y<-runif(1e7)
?abs
z<-(abs(x)^1.6 + abs(y)^1.6)<1
mean(z)
# Question 1
atan(1)
# Question 1
# use substitution y=xu
u<-runif(1e6)
function(x) {
mean(x/(1+(x*u)^2))
}
arctan<- function(x) {
mean(x/(1+(x*u)^2))
}
arctan(sqrt(3))
pi/3
#Question 4a
z<-rnorm(1e3,10,20)
summary(z)
se<-20
Estimated_Int<-10 #median=mean because rnorm
LCI = Estimated_Int-1.96*se #Lower Bound of CI
ULI = Estimated_Int+1.96*se #Upper Bound of CI
#Question 4a
z<-rnorm(1e3,10,20)
summary(z)
se<-20
Estimated_Int<-10 #median=mean because rnorm
LCI = Estimated_Int-1.96*se #Lower Bound of CI
ULI = Estimated_Int+1.96*se #Upper Bound of CI
se<-sd(z)
Estimated_Int<-mean(z) #median=mean because rnorm
LCI = Estimated_Int-1.96*se #Lower Bound of CI
ULI = Estimated_Int+1.96*se #Upper Bound of CI
# Question 4b
z=rnorm(10^3, 10, 20)
f=function(xVector){
n=length(xVector) x=(xVector[-c(n-1,n)]+xVector[-c(1,n)]+xVector[-c(1,2)])/3 return (x)
}
MA=f(z)
hist(MA,col="steelblue3", main="Histogram of Moving Average")
# Question 4b
z=rnorm(10^3, 10, 20)
f=function(xVector){
n=length(xVector) x=(xVector[-c(n-1,n)]+xVector[-c(1,n)]+xVector[-c(1,2)])/3 return (x)
}
f=function(xVector){
n=length(xVector)
x=(xVector[-c(n-1,n)]+xVector[-c(1,n)]+xVector[-c(1,2)])/3 return (x)
}
f=function(xVector){
n=length(xVector)
x=(xVector[-c(n-1,n)]+xVector[-c(1,n)]+xVector[-c(1,2)])/3
return (x)
}
MA=f(z)
hist(MA,col="steelblue3", main="Histogram of Moving Average")
X2=rnorm(Nsim, 0.09, sqrt(0.1))
X3=rnorm(Nsim, 0.09, sqrt(0.1))
X=exp(X1+X2+X3)+exp(X2+X3)+exp(X3)
# Question 5
Nsim<-10^6
X1=rnorm(Nsim, 0.09, sqrt(0.1))
X2=rnorm(Nsim, 0.09, sqrt(0.1))
X3=rnorm(Nsim, 0.09, sqrt(0.1))
X=exp(X1+X2+X3)+exp(X2+X3)+exp(X3)
mean(X>4)
return (sum(AV)/10^6)}
return (sum(AV)/10^6)}
prb=function(threshold){
AV=(sign(X-threshold)+1)/2
return (sum(AV)/10^6)
}
Pr=prb(4)
mean(X>4)
y1<-runif(1e5)
x1<-runif(1e5)
y1<-runif(1e5)
x12<-x1*(x1^2+y1^2>1/4)
x12<-x1*(x1^2+y1^2>1/4))]
x12<-x12[!x12 %in% c(0)]
x1<-runif(1e5)
y1<-runif(1e5)
x12<-x1*(x1^2+y1^2>1/4)
c(90,80) %in% c(0)
x12<-x12[!x12 %in% c(0)]
x1<-runif(1e5)
y1<-runif(1e5)
x12<-x1*(x1^2+y1^2>1/4)
x123<-x12[!x12 %in% c(0)]
c(90,80) %in% c(0)
sum(x12==0)
100000-sum(x12==0)
getwd()
setwd("~/Downloads")
read.csv('S&P500.csv')
read.csv('sp500.csv')
read.csv('sp500.csv')
i<-read.csv('sp500.csv')
View(i)
sp<-read.csv('sp500.csv')
setwd("~/github/Practitioners-Challenge-2022/data")
sp<-read.csv('sp500.csv')
ny<-read.csv('nyse.csv')
nas<-read.csv('nasdaq.csv')
plot(sp)
View(sp)
str(sp)
sp$caldt<-as.date(sp$caldt)
sp$caldt<-as.Date(sp$caldt)
str(sp)
View(ny)
sp$caldt<-as.Date(sp$caldt, format="DD/MM/YYYY")
View(ny)
str(sp)
nas<-read.csv('nasdaq.csv')
str(sp)
sp$caldt<-as.Date(sp$caldt, format="%d/%m/%Y")
sp<-read.csv('sp500.csv')
ny<-read.csv('nyse.csv')
nas<-read.csv('nasdaq.csv')
str(sp)
sp$caldt<-as.Date(sp$caldt, format="%d/%m/%Y")
str(sp)
plot(sp)
plot(sp, ph=20, cex=0.6)
?plot
help(plot)
plot(sp, type='l')
plot(sp, ph=20, cex=0.6)
plot(sp, ph=20, cex=0.6)
plot(sp, ph=18, cex=0.6)
plot(sp, ph=18, cex=0.2)
qqPlot(sp)
library(car)
qqPlot(sp)
qqPlot(sp$spindx)
